- debe tener instalado una versión superior de 18 de node.js
- por cdm de forma global: npm i @angular/cli -g
- creación proyecto: ng new todoapp --skip-tests
- Whic stylesheet format would you like to use? CSS
- ingrese a la carpeta: cd todoapp
- para ejecutar siempre el proyecto: ng serve

Diferencias con el html normal, se puede utilizar un h2 y darle otro valor, por medio del archivo app.component(tiene toda lo lógica de programación). Es decir en el ejemplo se tendría  un h1 q viene desde el html y otro desde el component. Enlazada gracais a templateUrl: './app.component.html',
Lista con angular: con directivas de control con *ngForm = "let task of tasks" 
                                                            {{ task }}  en singular porq si es en plural esta mal// array d tareas, lista de strings con iteración. Para usar el ngFroma hacer las importaciones: `import { CommonModule } from '@angular/common'; en archivo app.component.ts y en la seccion @Component : `imports : [RouterOutlet, CommonModule];` 
_________________________________________________________________________-
2da clase:
- en el terminal colocar: ng g component pages/home   : 2 páginas iniciales la de home(con la página a gestionar y 2 experimentar más características que la labs  -- ng g component pages/home) todo lo q se hizo en la primera clase para aquí en lab
- en app.routes: debe estar lo que van hacer componentes: 
import { HomeComponent } from './pages/home/home.component'; 
import { LabsComponent } from './pages/labs/labs.component';
  dentro {} las clases q son en este caso objetos.

   recuerde q la carpeta home es la final q tendrá el proyecto esencial, la carpeta labs es de experimento.
  - dirigirse al archivo app.routes.ts encontrará los estilos ya establecidos para iniciar a enfocarse en lo essencial del código. realice la importación necesaria


  export: es el redireccionamiento con el path /, la página inicial el home debe quedar '' en blanco. Todo ese export lo debe saber Angular pero se debe cambiar el archivo app.component.html colocar en este <router-outlet>
  copiar y pegar estilos style.css (q aplica a todos los componentes porq es global), en el archivo home.component.css quiere un estilo diferente/ específico


  la lógica se manejará en el archivo app.component.html, por eso se renderiza componentes del código.

___________________ 3ra clase
 String interpolation: es la manera de transmitir datos desde la lógica "componente" hasta el temple. Es la manera de enviar datos desde nuestro componente hacia la vista. Utilizando el doble símbolo de llaves {{ }}, o también conocidos como brackets, puedes imprimir el valor de una variable, realizar operaciones matemáticas o hacer el llamado a una función dentro del código HTML. Por medio de  {{ }} ya se vuelve dinámico el html, por lo q sin estos {{ }} es siempre estático.
 se debe tener presente q para poder usar todo esto se requiere en el archivo labs.component.ts debe estar la variable de forma pública y no privada de lo contrario NO puede usarse.  
 Presente un error al ejecutar el servidor, el error estaba en el archivo labs.component.ts en @Component imports: [RouterOutlet, CommonModule],
  templateUrl: './labs.component.html',
  styleUrls: ['./labs.component.css']
*el error era q faltaba [ ], y el }) , adicional a ello el styleUrl le faltaba la s de plural 


___________4ta clase property binding 
etiquetas como img, input no se cierran. Para poder usar estas etiquetas con html y tengan funcionalidad en angular, use [ ], posteriormente llame las variables q utilizo en el labs.component.ts (name y age) utilizando el button como disabled(como propiedad) inicializado en true.
Property binding in Angular helps you set values for properties of HTML elements or directives. Uselo para hacer cosas como alternar funciones de botones, establecer rutas mediante programación y compartir valores entre componentes.

Para W con objetos: person = {

}
esto en el labs.component.ts

en el labs.component.html
usar etiqueta p llamando al objeto y {{ }}

Como ya está el obj creado puede usar ejemplo:
<img [src]="person.avatar">


________________ 5ta clase

Event Binding: Permite controlar los eventos que suceden en estos elementos.
eventos más comunes clicks con button, se usa () + el elemento. Q es la forma de adjuntar un evento q debe tener una función en la lógica del componente --- estÁ  el clickHandler(){}  archivo labs.component.ts y en el labs.component.html se ejecuta dicho método.
                    Doble clicks: angular tiene un función (dbclick) me permite reutilizar el método anterior.

                    Change (change) desata los eventos en en html del input. Change lee los cambios del teclado. Elementos q envían eventos como parámetros, se llama al método en el html con ($event)

                    verificar con inspeccionar.

_______________________________6ta clase keydown keyup y keypress

keydown: se usa en los input, eventos cont target se puede manejar como un HtmlInputElement. (para leer el valor de event se usará .target)

Cuál es su != con change, el change funciona cada vez q de enter/click o quito el enfoque. El keydown como su nombre lo dice, cada q oprima una tecla.

En keydown se le puede específicar concretamente con comandos, pero con != método en este caso a clickHandler. 

KeyUp ocurre después de cualquier evento para un control causado al presionar o enviar la tecla.KeyDown ocurre para el primer control, mientras que los eventos KeyPress y KeyUp ocurren para el segundo control.

verificar con inspeccionar.

___________________________7 y 8va clase 
rendel html con herencia, pero ese árbol se conoce como DOM, en angular anteriormente era zone js(leía elementos de ese árbol, notificandole cambios en la variable, pero no sabía q elemento/ nodo había sufrido esos cambios, por tal motivo no se sabía cuál había sufrido cambios), 
Signal: (tiene reactividad granular, ya no sé recorre todo el árbol, porq sabe de antemano cuál fue el elemento q cambio. El nodo de ese elementoenvío una notificación del cambio un scroll/ llamada actualiza los datos, actualizando la vista),  en signal ya no tiene la cajita típica de js, en este caso se usa const + variable myName = signal(''); -- en función. Y saber su valor con un console.log(myName());  siendo esta la bombilla q notifica de los cambios.  

        Se utiliza para reactivar, necesita ser ejecutado por lo tanto requiere (  ) y q el html reaccione a esta solicitud. DEbe mencionarse para el apartado q necesita es decir oberve el archivo labscomponents.ts   name = signal('Karen');, debe importar la librería pertinente, adicional a ello no olvidar q debe ser ejecutada siempre ejm:  name().
        En el método se puede usar value para mirar el valor del evento .target, también se puede guardar ese valor del evento, en este caso se guarda en una nueva variable.
        si quiero modificar el valor d una signal, se usa this.name.set(newValue) --> en caso q desee modificarlo se usa set.
        Se puede observar en el título Signals y en "soy soy "


________________________9na clase
Directivas de control:
1ro se modifica el array d tareas q se tenía en *ngFor con task, se redenriza con signal. Recordar q se debe ejecutar por tal motivo en el 1ro y 2do tasks(). 
El ngFor de angular tiene nuevas opciones entre ellas indicandome la posición en el array con index as i.  en la misma jerarquía de {{ tasks }}, de igual forma se puede hacer el array como se se hacía en js q nos diga por cuantos elementos está constituido, lo más importante es usar {{ trasks()}} 

______clase 10
Uso *ngFor : leer el input y saber cuando hay un nuevo texto e insertalo en el array.
Se iniciará con el Input class="new-todo" del archivo home.Component.html, para ello se debe hacer un método en home.component.ts, en este caso llamado changeHandler(){}.
this.task.update permite modificiar/ agregar un nuevo valor, no lo borra o resetea. Update debe recibir el estado anterior, se le puede enviar un nuevo elemento, o todos lo elementos anteriores tasks, newTask] .
En el archivo home.component.html, en la línea 10 type="text" llamar al método, (change)="changeHandler($event)", envíando el evento ---- ||| mirar en el localhost escribir en el input algo dar enter y se agrega en las opciones.

método para borrar: en el archivo home.component.ts, se realizará con base al signal? la posición del elemento, gracias al index. 
normalmente se realizaría en js con splice/split, hace q mute el array, pero no es una buena practica, una buena practica es cambiando los estados(CRUD). Es por ello q también se recibe el estado anterior por medio de update, ya q se tienen esas tareas Tasks se pueden filtrar con filter, se puede usar como borrar, filtrando todo aquello q no necesite. como es una arrow function ((task, position)) recibe 2 parámetros en este caso la tarea y la posición. Otra nueva arrow function si position es !== index.
En el archivo home.component.html en la línea 23 <button class="destroy"(click)"deleTask()">   adicionar un click llamando al método deleTask y en la línea 19  en la lista <li *ngForm colocar un index as i;

____11 clase: *ngForm para objetos.
Método de inyección, como es común ver los objetos.
Por buenas prácticas si es un array de tareas debe cumplir con la estructura de datos. Por ello se debe usar una interfaz. 
Por buenas prácticas se debe hacer una carpeta llamada modelos y un nuevo archivo llamado task, en el cual tenga todos los atributos, como id, title y demás strings, su estado debe estar en boolean. Se debe realizar la importación del archivo en home.component.ts y deberá seguir el orden de este objeto con sus esos atributos. Este Signal tendrá una lista de tareas q debe cumplir, tipar la lista de Task.

Se debe realizar otros métodos para dividir funciones, en este caso adicionar tareas en el archivo home.components.ts.q se encaga del input. C se producía un error cambia la línea 31 this.tasks.... se coloca después del método addTask en la línea 40. en la línea 31 colocar el this.addTask(newTask) llamando al método y al atributo.

_____12 clase: método update
debug con unpipe , permite mirar como está el array, mirando el estado d la lista e imprimir en un formato json 

<pre>
        <code>
          {{ tasks() | json }}
        </code>
      </pre>

con signal se generan métodos inmutables, deja el array tal y como está. Realizar una arrow function con return d tasks map (para recorerlo y transformarlo, para mutar y cambiar la tarea d acuerdo con su posición). Usar if con la posición (trayendo todo por lo q está compuesta la tarea o task) y el index, dentro del if negamos el estado en el q está la tarea, si esta en false pasa a true o biceversa, cambiandolo.
En el archivo home.component.html línea 26 colocar [checked] = "task.completed"  + el evento q desencadenará la tarea task, con i la posición q usamos para eliminar la tarea.  En dicho archivo línea 63 etiqueta span, agregar el contador items con {{tasks().length}}

_____clase 13 ngIf:
En el archivo labs.component.ts y labs.component.html 
El ngIf es un condicional que sí el elemento se cumple o la condición se renderiza en el caso de *ngIf="1 ===1"> . En caso negativo no es q lo oculte, es q no fue renderizado por no cumplir la condición en el caso de *ngIf="1 !==1">. Todo se puede observar en el inspeccionar 
Con signal <div *ngIf="name()"> el signal es el name
        <div *ngIf="name() === 'Karen'"> Es sensible a las mayúsculas si tiene karen es ! = a Karen no se habría mostrado
        My content visible Karen    
      </div>
En el archivo labs.component.ts para objetos, person = signal({ });
Al realizar este cambio afecta los age de labs.component.html, ya q person ya no es un valor directo sino una signal. Se debe llamar como: signal en este caso person().    Se trabajaría con una signal q tiene un obj como atributo, además recibe anidación. La negación o else se puede hacer en angular: ng-template:
<ng-template>
        Soy karen y soy menor d 18, probando el else
      </ng-template>
adicional a ello se debe incluir en el div ;else    y llamar a un bloque, el nombre puede ser el q se desee. 
; else elseBlock">
pero para q funcione debo colocar <ng-template #elseBlock> el llamado con # + nombre del bloque.
se crea un método changeAge para pedir la entrada de la edad con input en el archivo labs.component.ts recordar q person es obj, q se desea actualizar con un nuevo estado a partir del nuevo estado, el cual debe retornar y traer todo lo de ese estado en age newValue debe ser entero y no string.


____________clase 14 
Pluralidad de item con ngIf en span home.component.html

cuando existen muchos *ngIf se debe usar ngSwitch es más fácil su lectura ---> práctica en archivo labs.component.html
      div [ngSwitch]="person().name">
        <p *ngSwitchCase="'Karen'"> Yo soy Karen </p>
        <p *ngSwitchCase="'Juan'"> Yo soy Juan</p>
      
        <p *ngSwitchDefault=""></p> ----> cuando es un else o no cumple la condición
    
___________clase 15
uso más profesional(frontend y backend) de los input
en el archivo labs.component.ts importar ReactiveFormsModule, con ello se puede usar formularios reactivos, el primer elemento no será un signal sino una instancia un FormControl.
colorCtrl = new FormControl();
en el archivo labs.component.html, colocar input type="color" [formControl]="colorCtrl"  ---> esto ya maneja la edición y el cambio, se realiza todo desde el componente (validaciones).
publicación del valor: <p>color: {{ colorCtrl.value }}
desde el html se le el valor desde la forma reactiva, desde la lógica se lee ese valor desde el archivo .ts en el componente
se puede reaccionar la lógica desde el html o del .ts : this.colorCtrl.valueChanges.subscribe()   ---> valor de cambio y suscribirse .. como el valor esta cambiando es la mejor forma d estar pendiente de este cambio  
____________Clase 16
formularios reactivos, inteligentes y sin información basura en home.component.html.
en el archivo home.component.ts importar ReactiveFormsModule, crear una variable con una instancia de formControl para realizar nuevas validaciones, el primer valor por defecto es task, por el momento no requiero enviarlo, Lo necesito vacío de string. Menciono q no necesito valores nulos, q las validaciones van hacer por array d validaciones, en este caso debe ser requerido.
en el archivo home.component.html cambia la línea 11 (change ($event)) d signal por [formControl]="newTaskCtrl" , sólo cuando ejecute click se genere una acción, en este caso la q se tenía en signal changeHandler enviandole el evento. Pero gracias al formControl ya no se neceita enviar se envía sólo desde newTaskCtrl y se limpia y quita el event de aquí, en el método archivo home.component.ts, el formControl tiene condiciones/estados para saber si el input es valido o no, según las reglas implementadas en el newTaskCtrls. Sí es valido necesito guardar ese valor en una variable, se adiciona el adiciona el valor de la tarea, y por último se limpia con un setvalue ('') vacío. Si no es valido no se agregará ninguna tarea.

___________clase 17
enel home.component.html eliminar etiqueta pre
en el home.component.ts colocar .trim(), se encarga d quitar espacios innecesarios en el inicio y en el final. Colocarlo ene método changeHandler const value = this.newTaskCtrl.value.trim(); 
posteriormente realizar una validación en dicho método siempre y cuando el espacio este vacío realizar el adicionar una mueva tarea. 
Todo lo anterior también se puede simplificar con una validación en newTaskCtrl y colocar Validators.pattern(con una condición particular)

etiquetas de angular <svg pero cuando se W con property Binding al usar etiqueta svg, se dee usar [attr] para modificar el atributo svg , no se puede realizar de forma directa. 


