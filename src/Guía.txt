- debe tener instalado una versión superior de 18 de node.js
- por cdm de forma global: npm i @angular/cli -g
- creación proyecto: ng new todoapp --skip-tests
- Whic stylesheet format would you like to use? CSS
- ingrese a la carpeta: cd todoapp
- para ejecutar siempre el proyecto: ng serve

Diferencias con el html normal, se puede utilizar un h2 y darle otro valor, por medio del archivo app.component(tiene toda lo lógica de programación). Es decir en el ejemplo se tendría  un h1 q viene desde el html y otro desde el component. Enlazada gracais a templateUrl: './app.component.html',
Lista con angular: con directivas de control con *ngForm = "let task of tasks" 
                                                            {{ task }}  en singular porq si es en plural esta mal// array d tareas, lista de strings con iteración. Para usar el ngFroma hacer las importaciones: `import { CommonModule } from '@angular/common'; en archivo app.component.ts y en la seccion @Component : `imports : [RouterOutlet, CommonModule];` 
_________________________________________________________________________-
2da clase:
- en el terminal colocar: ng g component pages/home   : 2 páginas iniciales la de home(con la página a gestionar y 2 experimentar más características que la labs  -- ng g component pages/home) todo lo q se hizo en la primera clase para aquí en lab
- en app.routes: debe estar lo que van hacer componentes: 
import { HomeComponent } from './pages/home/home.component'; 
import { LabsComponent } from './pages/labs/labs.component';
  dentro {} las clases q son en este caso objetos.

   recuerde q la carpeta home es la final q tendrá el proyecto esencial, la carpeta labs es de experimento.
  - dirigirse al archivo app.routes.ts encontrará los estilos ya establecidos para iniciar a enfocarse en lo essencial del código. realice la importación necesaria


  export: es el redireccionamiento con el path /, la página inicial el home debe quedar '' en blanco. Todo ese export lo debe saber Angular pero se debe cambiar el archivo app.component.html colocar en este <router-outlet>
  copiar y pegar estilos style.css (q aplica a todos los componentes porq es global), en el archivo home.component.css quiere un estilo diferente/ específico


  la lógica se manejará en el archivo app.component.html, por eso se renderiza componentes del código.

___________________ 3ra clase
 String interpolation: es la manera de transmitir datos desde la lógica "componente" hasta el temple. Es la manera de enviar datos desde nuestro componente hacia la vista. Utilizando el doble símbolo de llaves {{ }}, o también conocidos como brackets, puedes imprimir el valor de una variable, realizar operaciones matemáticas o hacer el llamado a una función dentro del código HTML. Por medio de  {{ }} ya se vuelve dinámico el html, por lo q sin estos {{ }} es siempre estático.
 se debe tener presente q para poder usar todo esto se requiere en el archivo labs.component.ts debe estar la variable de forma pública y no privada de lo contrario NO puede usarse.  
 Presente un error al ejecutar el servidor, el error estaba en el archivo labs.component.ts en @Component imports: [RouterOutlet, CommonModule],
  templateUrl: './labs.component.html',
  styleUrls: ['./labs.component.css']
*el error era q faltaba [ ], y el }) , adicional a ello el styleUrl le faltaba la s de plural 


___________4ta clase property binding 
etiquetas como img, input no se cierran. Para poder usar estas etiquetas con html y tengan funcionalidad en angular, use [ ], posteriormente llame las variables q utilizo en el labs.component.ts (name y age) utilizando el button como disabled(como propiedad) inicializado en true.

Para W con objetos: person = {

}
esto en el labs.component.ts

en el labs.component.html
usar etiqueta p llamando al objeto y {{ }}

Como ya está el obj creado puede usar ejemplo:
<img [src]="person.avatar">


________________ 5ta clase

Event Binding: Permite controlar los eventos que suceden en estos elementos.
eventos más comunes clicks con button, se usa () + el elemento. Q es la forma de adjuntar un evento q debe tener una función en la lógica del componente --- estÁ  el clickHandler(){}  archivo labs.component.ts y en el labs.component.html se ejecuta dicho método.
                    Doble clicks: angular tiene un función (dbclick) me permite reutilizar el método anterior.

                    Change (change) desata los eventos en en html del input. Change lee los cambios del teclado. Elementos q envían eventos como parámetros, se llama al método en el html con ($event)

                    verificar con inspeccionar.

_______________________________6ta clase keydown keyup y keypress

keydown: se usa en los input, eventos cont target se puede manejar como un HtmlInputElement. (para leer el valor de event se usará .target)

Cuál es su != con change, el change funciona cada vez q de enter/click o quito el enfoque. El keydown como su nombre lo dice, cada q oprima una tecla.

En keydown se le puede específicar concretamente con comandos, pero con != método en este caso a clickHandler. 

KeyUp ocurre después de cualquier evento para un control causado al presionar o enviar la tecla.KeyDown ocurre para el primer control, mientras que los eventos KeyPress y KeyUp ocurren para el segundo control.

verificar con inspeccionar.

___________________________7 y 8va clase 
rendel html con herencia, pero ese árbol se conoce como DOM, en angular anteriormente era zone js(leía elementos de ese árbol, notificandole cambios en la variable, pero no sabía q elemento/ nodo había sufrido esos cambios, por tal motivo no se sabía cuál había sufrido cambios), 
Signal: (tiene reactividad granular, ya no sé recorre todo el árbol, porq sabe de antemano cuál fue el elemento q cambio. El nodo de ese elementoenvío una notificación del cambio un scroll/ llamada actualiza los datos, actualizando la vista),  en signal ya no tiene la cajita típica de js, en este caso se usa const + variable myName = signal(''); -- en función. Y saber su valor con un console.log(myName());  siendo esta la bombilla q notifica de los cambios.  

        Se utiliza para reactivar, necesita ser ejecutado por lo tanto requiere (  ) y q el html reaccione a esta solicitud. DEbe mencionarse para el apartado q necesita es decir oberve el archivo labscomponents.ts   name = signal('Karen');, debe importar la librería pertinente, adicional a ello no olvidar q debe ser ejecutada siempre ejm:  name().
        En el método se puede usar value para mirar el valor del evento .target, también se puede guardar ese valor del evento, en este caso se guarda en una nueva variable.
        si quiero modificar el valor d una signal, se usa this.name.set(newValue) --> en caso q desee modificarlo se usa set.
        Se puede observar en el título Signals y en "soy soy "


________________________9na clase
Directivas de control:
1ro se modifica el array d tareas q se tenía en *ngFor con task, se redenriza con signal. Recordar q se debe ejecutar por tal motivo en el 1ro y 2do tasks(). 
El ngFor de angular tiene nuevas opciones entre ellas indicandome la posición en el array con index as i.  en la misma jerarquía de {{ tasks }}, de igual forma se puede hacer el array como se se hacía en js q nos diga por cuantos elementos está constituido, lo más importante es usar {{ trasks()}} 

______clase 10
Uso *ngFor : leer el input y saber cuando hay un nuevo texto e insertalo en el array.
Se iniciará con el Input class="new-todo" del archivo home.Component.html, para ello se debe hacer un método en home.component.ts, en este caso llamado changeHandler(){}.
this.task.update permite modificiar/ agregar un nuevo valor, no lo borra o resetea. Update debe recibir el estado anterior, se le puede enviar un nuevo elemento, o todos lo elementos anteriores tasks, newTask] .
En el archivo home.component.html, en la línea 10 type="text" llamar al método, (change)="changeHandler($event)", envíando el evento ---- ||| mirar en el localhost escribir en el input algo dar enter y se agrega en las opciones.

método para borrar: en el archivo home.component.ts, se realizará con base al signal? la posición del elemento, gracias al index. 
normalmente se realizaría en js con splice/split, hace q mute el array, pero no es una buena practica, una buena practica es cambiando los estados(CRUD). Es por ello q también se recibe el estado anterior por medio de update, ya q se tienen esas tareas Tasks se pueden filtrar con filter, se puede usar como borrar, filtrando todo aquello q no necesite. como es una arrow function ((task, position)) recibe 2 parámetros en este caso la tarea y la posición. Otra nueva arrow function si position es !== index.
En el archivo home.component.html en la línea 23 <button class="destroy"(click)"deleTask()">   adicionar un click llamando al método deleTask y en la línea 19  en la lista <li *ngForm colocar un index as i;





