- debe tener instalado una versión superior de 18 de node.js
- por cdm de forma global: npm i @angular/cli -g
- creación proyecto: ng new todoapp --skip-tests
- Whic stylesheet format would you like to use? CSS
- ingrese a la carpeta: cd todoapp
- para ejecutar siempre el proyecto: ng serve

Diferencias con el html normal, se puede utilizar un h2 y darle otro valor, por medio del archivo app.component(tiene toda lo lógica de programación). Es decir en el ejemplo se tendría  un h1 q viene desde el html y otro desde el component. Enlazada gracais a templateUrl: './app.component.html',
Lista con angular: con directivas de control con *ngForm = "let task of tasks" 
                                                            {{ task }}  en singular porq si es en plural esta mal// array d tareas, lista de strings con iteración. Para usar el ngFroma hacer las importaciones: `import { CommonModule } from '@angular/common'; en archivo app.component.ts y en la seccion @Component : `imports : [RouterOutlet, CommonModule];` 
_________________________________________________________________________-
2da clase:
- en el terminal colocar: ng g component pages/home   : 2 páginas iniciales la de home(con la página a gestionar y 2 experimentar más características que la labs  -- ng g component pages/home) todo lo q se hizo en la primera clase para aquí en lab
- en app.routes: debe estar lo que van hacer componentes: 
import { HomeComponent } from './pages/home/home.component'; 
import { LabsComponent } from './pages/labs/labs.component';
  dentro {} las clases q son en este caso objetos.

   recuerde q la carpeta home es la final q tendrá el proyecto esencial, la carpeta labs es de experimento.
  - dirigirse al archivo app.routes.ts encontrará los estilos ya establecidos para iniciar a enfocarse en lo essencial del código. realice la importación necesaria


  export: es el redireccionamiento con el path /, la página inicial el home debe quedar '' en blanco. Todo ese export lo debe saber Angular pero se debe cambiar el archivo app.component.html colocar en este <router-outlet>
  copiar y pegar estilos style.css (q aplica a todos los componentes porq es global), en el archivo home.component.css quiere un estilo diferente/ específico


  la lógica se manejará en el archivo app.component.html, por eso se renderiza componentes del código.

___________________ 3ra clase
 String interpolation: es la manera de transmitir datos desde la lógica "componente" hasta el temple. Es la manera de enviar datos desde nuestro componente hacia la vista. Utilizando el doble símbolo de llaves {{ }}, o también conocidos como brackets, puedes imprimir el valor de una variable, realizar operaciones matemáticas o hacer el llamado a una función dentro del código HTML. Por medio de  {{ }} ya se vuelve dinámico el html, por lo q sin estos {{ }} es siempre estático.
 se debe tener presente q para poder usar todo esto se requiere en el archivo labs.component.ts debe estar la variable de forma pública y no privada de lo contrario NO puede usarse.  
 Presente un error al ejecutar el servidor, el error estaba en el archivo labs.component.ts en @Component imports: [RouterOutlet, CommonModule],
  templateUrl: './labs.component.html',
  styleUrls: ['./labs.component.css']
*el error era q faltaba [ ], y el }) , adicional a ello el styleUrl le faltaba la s de plural 


